#!/bin/bash

version=0.9.1

display_help() {
    echo "open5gs-dbctl: Open5GS Database Configuration Tool ($version)"
    echo "MONGODB_IP COMMANDS"
    echo "COMMANDS:" >&2
    echo "   add {imsi key opc}: adds a user to the database with default values"
    echo "   remove {imsi}: removes a user from the database"
    echo "   reset: WIPES OUT the database and restores it to an empty default"
    echo "   static_ip {imsi ip4}: adds a static IP assignment to an already-existing user"
    echo "   static_ip6 {imsi ip6}: adds a static IPv6 assignment to an already-existing user"
    echo "   type {imsi type}: changes the PDN-Type of the first PDN: 0 = IPv4, 1 = IPv6, 2 = IPv4v6, 3 = v4 OR v6"
    echo "   help: displays this message and exits"
    echo "   default values are as follows: APN \"internet\", dl_bw/ul_bw 1 Gbps, PGW address is 127.0.0.3, IPv4 only"
}


if [ "$#" -lt 2 ]; then
	display_help
	exit 1
fi

if [ "$1" = "help" ]; then
	display_help
	exit 1
fi

MONGO_IP=$1

if [ "$2" = "add" ]; then
	if [ "$#" -eq 5 ]; then
		IMSI=$3 
		KI=$4
		OPC=$5

        echo $IMSI $KI $OPC
		mongo --eval "db.subscribers.update({\"imsi\" : \"$IMSI\"}, { \$setOnInsert: { \"imsi\" : \"$IMSI\", \"security\" : { \"k\" : \"$KI\", \"amf\" : \"8000\", \"op\" : null, \"opc\" : \"$OPC\" }, \"ambr\" : { \"downlink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) }, \"uplink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) } }, \"slice\" : [{ \"sst\" : NumberInt(1), \"sd\" : \"1\", \"default_indicator\" : true, \"session\" : [{ \"name\" : \"internet\", \"type\" : NumberInt(1), \"qos\" : { \"index\" : NumberInt(9), \"arp\" : { \"priority_level\" : NumberInt(8), \"pre_emption_vulnerability\" : NumberInt(1), \"pre_emption_capability\" : NumberInt(1) } }, \"ambr\" : { \"downlink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) }, \"uplink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) } }, \"_id\" : new ObjectId(), \"pcc_rule\" : [ ] } ], \"access_restriction_data\" : NumberInt(32), \"subscriber_status\" : NumberInt(0), \"network_access_mode\" : NumberInt(2), \"subscribed_rau_tau_timer\" : NumberInt(12), \"schema_version\" : 1 }] } }, upsert=true);" $MONGO_IP/open5gs
		exit 0
	fi

	if [ "$#" -eq 6 ]; then
		IMSI=$3 
		IP=$4
		KI=$5
		OPC=$6

		mongo --eval "db.subscribers.update({\"imsi\" : \"$IMSI\"}, { \$setOnInsert: { \"imsi\" : \"$IMSI\", \"security\" : { \"k\" : \"$KI\", \"amf\" : \"8000\", \"op\" : null, \"opc\" : \"$OPC\" }, \"ambr\" : { \"downlink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) }, \"uplink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) } }, \"slice\" : [{ \"sst\" : NumberInt(1), \"sd\" : \"1\", \"default_indicator\" : true, \"session\" : [{ \"name\" : \"internet\", \"type\" : NumberInt(0), \"qos\" : { \"index\" : NumberInt(9), \"arp\" : { \"priority_level\" : NumberInt(8), \"pre_emption_vulnerability\" : NumberInt(1), \"pre_emption_capability\" : NumberInt(0) } }, \"ue\" : { \"addr\" : \"$IP\" }, \"ambr\" : { \"downlink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) }, \"uplink\" : { \"value\" : NumberInt(1), \"unit\" : NumberInt(3) } }, \"_id\" : new ObjectId(), \"pcc_rule\" : [ ] } ], \"access_restriction_data\" : NumberInt(32), \"subscriber_status\" : NumberInt(0), \"network_access_mode\" : NumberInt(2), \"subscribed_rau_tau_timer\" : NumberInt(12), \"schema_version\" : 1 }] } }, upsert=true);" $MONGO_IP/open5gs
		exit 0
	fi

	echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl add imsi key opc\""
	exit 1
fi

if [ "$2" = "remove" ]; then
	if [ "$#" -ne 3 ]; then
		echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl remove imsi\""
		exit 1
	fi

	IMSI=$3 
	mongo --eval "db.subscribers.remove({\"imsi\": \"$IMSI\"});" $MONGO_IP/open5gs
	exit 0
fi

if [ "$2" = "reset" ]; then
	if [ "$#" -ne 2 ]; then
		echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl reset\""
		exit 1
	fi

	mongo --eval "db.subscribers.remove({});" $MONGO_IP/open5gs
	exit 0
fi

if [ "$2" = "static_ip" ]; then
	if [ "$#" -ne 4 ]; then
		echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl static_ip imsi ip\""
		exit 1
	fi
	IMSI=$3 
	IP=$4

	mongo --eval "db.subscribers.update({\"imsi\": \"$IMSI\"},{\$set: { \"slice.0.session.ue.addr\": \"$IP\" }});" $MONGO_IP/open5gs
	exit 0
fi

if [ "$2" = "static_ip6" ]; then
	if [ "$#" -ne 4 ]; then
		echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl static_ip6 imsi ip\""
		exit 1
	fi
	IMSI=$3 
	IP=$4

	mongo --eval "db.subscribers.update({\"imsi\": \"$IMSI\"},{\$set: { \"slice.0.session.ue.addr6\": \"$IP\" }});" $MONGO_IP/open5gs
	exit 0
fi

if [ "$2" = "type" ]; then
	if [ "$#" -ne 4 ]; then
		echo "open5gs-dbctl: incorrect number of args, format is \"open5gs-dbctl type imsi type\""
		exit 1
	fi
	IMSI=$3 
	TYPE=$4

	mongo --eval "db.subscribers.update({\"imsi\": \"$IMSI\"},{\$set: { \"slice.0.session.type\": NumberInt($TYPE) }});" $MONGO_IP/open5gs
	exit 0
fi

display_help
